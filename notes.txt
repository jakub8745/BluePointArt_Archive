/// NOTATKI

/*// pozostalość po próbie wczytania róznych textur na ściany ściany
const newGeometry = new THREE.BoxGeometry(1, 1, 1);
  const materials = [
    new THREE.MeshLambertMaterial({
      color: "red",
    }), //back
    new THREE.MeshLambertMaterial({ color: "green" }), //front
    new THREE.MeshLambertMaterial({
      map: loader.load("textures/dystopia/wallTexture.jpg"),
      normalMap: loader.load("../textures/dystopia/WallNormalMap.jpg"),
    }), //up
    new THREE.MeshLambertMaterial({
      color: "yellow", //down
    }),
    new THREE.MeshLambertMaterial({
      map: loader.load("../textures/floorDarkConcrete.jpg"),
      normalMap: loader.load("../textures/dystopia/WallNormalMap.jpg"),
    }), //right

    new THREE.MeshLambertMaterial({ color: "blue" }), //left
  ];

  const newMesh = new THREE.Mesh(newGeometry, materials);
  // newMesh.position.set(-2, -1.5, -1);
  //newMesh.rotation.set(0.5, 0.5, 0.5);
  //newMesh.receiveShadow = true;
  // newMesh.castShadow = true;
  //newMesh.scale.setScalar(0.2);
  newMesh.material.side = THREE.DoubleSide;
  newMesh.name = "dupa";
  console.log(newMesh);
  scene.add(newMesh);


  /// gui .listen()
  .listen()
          .onChange(function () {
            const el = scene.getObjectByName("lightsDystopia");

            console.log(mesh.position.x, el.position.x);
            el.position.copy(mesh.position.x);
          });


          ///////

            //  NearestFilter: THREE.NearestFilter,
      //               NearestMipMapLinearFilter: THREE.NearestMipMapLinearFilter,
      //              NearestMipMapNearestFilter: THREE.NearestMipMapNearestFilter,
     
   /*
          const SLightFolder = gui.addFolder(mesh.name);
          SLightFolder.add(mesh, "intensity", 0, 500, 0.0001);
          SLightFolder.add(mesh, "decay", 0, 2, 0.0001);
          SLightFolder.add(mesh.position, "x", -100, 100, 0.001);
          SLightFolder.add(mesh.position, "y", -100, 100, 0.001);
          SLightFolder.add(mesh.position, "z", -100, 100, 0.001);
  
          SLightFolder.add(mesh.target.position, "x", -100, 100, 0.001);
          SLightFolder.add(mesh.target.position, "y", -100, 100, 0.001);
          SLightFolder.add(mesh.target.position, "z", -100, 100, 0.001);
          */
// excluding meshes
/*
        if (
          /obj3D/.test(c.userData.type) // ||
        ) {
          // console.log("wall:  ", c);
          return;
        }
        //
*/
/*
        if (visualGeometries.length) {
          console.log("visualGeometries");
          const newGeom =
            BufferGeometryUtils.mergeBufferGeometries(visualGeometries);
          const newMesh = new THREE.Mesh(
            newGeom,
            new THREE.MeshStandardMaterial({
              color: parseInt(typeOfmesh),
              shadowSide: 2,
            })
          );
          newMesh.castShadow = true;
          newMesh.receiveShadow = true;
          newMesh.material.shadowSide = 2;
          // environment.add(newMesh);
        }

        //import * as BufferGeometryUtils from "three/addons/utils/BufferGeometryUtils.js";

        */
// próby shadera (nieudane)
/*
  const shTexture = new THREE.TextureLoader().load("/textures/playButton.png");
  texture.colorSpace = THREE.SRGBColorSpace;
  const torus = new THREE.Mesh(
    new THREE.TorusGeometry(1, 0.3, 100, 100),
    new THREE.ShaderMaterial({
      vertexShader:
     `
		      varying vec2 vUv;

		      void main() {

		    	vUv = uv;
		    	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 0.5 );

		}`,
      fragmentShader:  `

      uniform vec2 center;
      uniform float angle;
      uniform float scale;
      uniform vec2 tSize;
  
      uniform sampler2D tDiffuse;
  
      varying vec2 vUv;
  
      float pattern() {
  
        float s = sin( angle ), c = cos( angle );
  
        vec2 tex = vUv * tSize - center;
        vec2 point = vec2( c * tex.x - s * tex.y, s * tex.x + c * tex.y ) * scale;
  
        return ( sin( point.x ) * sin( point.y ) ) * 4.0;
  
      }
  
      void main() {
  
        vec4 color = texture2D( tDiffuse, vUv );
  
        float average = ( color.r + color.g + color.b ) / 3.0;
  
        gl_FragColor = vec4( vec3( average * 10.0 - 5.0 + pattern() ), color.a );
  
      }`,
      side: THREE.DoubleSide,
      uniforms: {
        tDiffuse: { value: shTexture },
        tSize: { value: new THREE.Vector2(256, 256) },
        center: { value: new THREE.Vector2(0.05, 0.05) },
        angle: { value: 1.57 },
        scale: { value: 8.01 },
      },
    })
  );

  scene.add(torus);

  /////////////

   ShaderBox: (mesh) => {
    const uniforms = {
      thickness: { value: 0.5 },
    };

    const shaderMaterial = new THREE.ShaderMaterial({
      uniforms: DotScreenShader.uniforms,

      vertexShader: DotScreenShader.vertexShader,
      fragmentShader: DotScreenShader.fragmentShader,
      color: 0xff0000,
      side: THREE.DoubleSide,
      //alphaToCoverage: true, // only works when WebGLRenderer's "antialias" is set to "true"
    });
    //shaderMaterial.extensions.derivatives = true;
    mesh.material = shaderMaterial;
    mesh.material.needsUpdate = true;
    console.log("ShaderBox", mesh.material, uniforms.scale);
    const gui = new GUI();

    //
    //
    gui
      .add(uniforms.thickness, "value")
      .min(0.01)
      .max(10)
      .step(0.01)
      .onChange(() => {
        mesh.material.needsUpdate = true;
        animate();
      });
    //*/
    // gui.add(torus.material.uniforms.uNoise, 'value', 10, 25, 0.1).name('noise');
  },
*/
  //////////////////// audio: kitchen_sounds
    /*
      const geometryDot = new THREE.SphereBufferGeometry(0.25, 0.25, 0.25); //0.5
      const materialDot = new THREE.MeshBasicMaterial({
        color: 0x010101,
        wireframe: true,
      });
      const dot = new THREE.Mesh(geometryDot, materialDot);
      dot.position.set(-7.6, 7, 18);
      dot.name = "dot";
      dot.material.visible = false;
      scene.add(dot);
      const listenerOnPoint = new THREE.AudioListener();
      camera.add(listenerOnPoint);
      const switchAudioPoint = new THREE.PositionalAudio(listenerOnPoint);
      const audioLoaderOnPoint = new THREE.AudioLoader();
      audioLoaderOnPoint.load("sounds/kitchen_sounds.mp3", function (buffer) {
        switchAudioPoint.name = "kitchenSounds";
        switchAudioPoint.setBuffer(buffer);
        switchAudioPoint.setLoop(true);
        switchAudioPoint.setRefDistance(0.2);
        switchAudioPoint.setVolume(20);

        if (scene.getObjectByName(`dot`)) {
          scene.getObjectByName(`dot`).add(switchAudioPoint);
        }
      });
      */